From 5bd671e608cd29cd65e08d0c6055e00691d6c78e Mon Sep 17 00:00:00 2001
From: Andrew Sayman <asayman@hirezstudios.com>
Date: Wed, 26 Apr 2023 21:39:16 -0400
Subject: [PATCH 3/6] Use std::size_t

---
 one/arcus/allocator.cpp | 16 ++++++++--------
 one/arcus/allocator.h   | 22 +++++++++++-----------
 2 files changed, 19 insertions(+), 19 deletions(-)

diff --git a/one/arcus/allocator.cpp b/one/arcus/allocator.cpp
index 883cdde..61d78c8 100644
--- a/one/arcus/allocator.cpp
+++ b/one/arcus/allocator.cpp
@@ -10,7 +10,7 @@ namespace allocator {
 namespace {
 
 // Wrapper to allow assignment to the std::function.
-void *default_alloc(size_t bytes) {
+void *default_alloc(std::size_t bytes) {
     return std::malloc(bytes);
 }
 
@@ -19,18 +19,18 @@ void default_free(void *p) {
     std::free(p);
 }
 
-void *default_realloc(void *p, size_t bytes) {
+void *default_realloc(void *p, std::size_t bytes) {
     return std::realloc(p, bytes);
 }
 
 }  // namespace
 
 // Global allocation overridable functions.
-std::function<void *(size_t)> _alloc = default_alloc;
+std::function<void *(std::size_t)> _alloc = default_alloc;
 std::function<void(void *)> _free = default_free;
-std::function<void *(void *, size_t)> _realloc = default_realloc;
+std::function<void *(void *, std::size_t)> _realloc = default_realloc;
 
-void set_alloc(std::function<void *(size_t)> fn) {
+void set_alloc(std::function<void *(std::size_t)> fn) {
     _alloc = fn;
 }
 
@@ -38,7 +38,7 @@ void set_free(std::function<void(void *)> fn) {
     _free = fn;
 }
 
-void set_realloc(std::function<void *(void *, size_t)> fn) {
+void set_realloc(std::function<void *(void *, std::size_t)> fn) {
     _realloc = fn;
 }
 
@@ -48,7 +48,7 @@ void reset_overrides() {
     _realloc = default_realloc;
 }
 
-void *alloc(size_t bytes) {
+void *alloc(std::size_t bytes) {
     assert(_alloc);
     void *p = _alloc(bytes);
     assert(p != nullptr);
@@ -60,7 +60,7 @@ void free(void *p) {
     _free(p);
 }
 
-void *realloc(void *p, size_t s) {
+void *realloc(void *p, std::size_t s) {
     return _realloc(p, s);
 }
 
diff --git a/one/arcus/allocator.h b/one/arcus/allocator.h
index 82214c6..24957a4 100644
--- a/one/arcus/allocator.h
+++ b/one/arcus/allocator.h
@@ -10,7 +10,7 @@ namespace allocator {
 
 // Override alloc, which is used by all allocation functions in this
 // namespace. Default is ::operator new.
-void set_alloc(std::function<void *(size_t)>);
+void set_alloc(std::function<void *(std::size_t)>);
 
 // Override free, which is used by all deallocation functions in this
 // namespace. Default is ::operator delete.
@@ -18,19 +18,19 @@ void set_free(std::function<void(void *)>);
 
 // Override realloc, which is used by the realloc function in this
 // namespace. Default is ::operator delete.
-void set_realloc(std::function<void *(void *, size_t)>);
+void set_realloc(std::function<void *(void *, std::size_t)>);
 
 // Sets the allocators back to the default.
 void reset_overrides();
 
 // Use the function set by set_alloc to allocate memory.
-void *alloc(size_t);
+void *alloc(std::size_t);
 
 // Use the function set by set_free to free memory.
 void free(void *);
 
 // Reallocate existing memory with new size. Must match standard c behavior.
-void *realloc(void *p, size_t s);
+void *realloc(void *p, std::size_t s);
 
 // Equivalent to the new operator, but using the function set by set_alloc.
 template <class T, class... Args>
@@ -52,19 +52,19 @@ void destroy(T *p) noexcept {
 // has its constructor called, with the same arguments. The returned memory must
 // be deleted via destroy_array.
 template <class T, class... Args>
-T *create_array(size_t count, Args &&... args) {
+T *create_array(std::size_t count, Args &&... args) {
     // Allocate additional space to store the array length.
-    size_t padding = sizeof(size_t);
+    std::size_t padding = sizeof(std::size_t);
     auto data = alloc(sizeof(T) * count + padding);
 
     // The padding will be at the front of the data. Set it to the array length.
-    size_t *start = reinterpret_cast<size_t *>(data);
+    std::size_t *start = reinterpret_cast<std::size_t *>(data);
     *start = count;
 
     // The actual array elements start directly after the padding.
     auto p = reinterpret_cast<T *>(start + 1);
     auto element = p;
-    for (size_t i = 0; i < count; ++i) {
+    for (std::size_t i = 0; i < count; ++i) {
         ::new (element) T(std::forward<Args>(args)...);
         ++element;
     }
@@ -81,13 +81,13 @@ void destroy_array(T *p) noexcept {
 
     // The buffer allocated will start before the array length preceding the
     // array elements (p).
-    size_t *start = (reinterpret_cast<size_t *>(p) - 1);
+    std::size_t *start = (reinterpret_cast<std::size_t *>(p) - 1);
     // The array length is first.
-    size_t count = *start;
+    std::size_t count = *start;
 
     // Call destructors.
     T *element = reinterpret_cast<T *>(p);
-    for (size_t i = 0; i < count; ++i) {
+    for (std::size_t i = 0; i < count; ++i) {
         element->~T();
         ++element;
     }
-- 
2.34.1

